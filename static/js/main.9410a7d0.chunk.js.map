{"version":3,"sources":["components/Searchbar.js","components/Navbar.js","components/Context.js","components/ProjectActionModal.js","components/EditProject.js","components/SelectableProject.js","components/ProjectsList.js","components/AddProject.js","components/NewTodoModal.js","components/Sidebar.js","components/Todo.js","components/TodoList.js","components/Modal.js","App.js","index.js"],"names":["Searchbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","focus","event","setState","isFocused","blur","formRef","current","reset","preventDefault","inputRef","relatedTarget","closeRef","click","handleClose","state","React","createRef","react_default","a","createElement","ref","type","className","placeholder","onFocus","onBlur","onClick","Component","Navbar","toggleSidebar","components_Searchbar","Context","createContext","ProjectActionModal","handleInputChange","projectName","target","value","initialProjectName","autoComplete","onSubmit","bind","htmlFor","labelText","required","id","onChange","spellCheck","onCancel","cancelButtonText","submitButtonText","EditProject","submitForm","modalState","length","context","editProjectName","project","closeModal","handleDelete","deleteProject","components_ProjectActionModal","name","contextType","SelectableProject","classes","curentProject","handleClick","changeProjectTo","allProjects","style","display","justifyContent","alignSelf","alignItems","components_Context","Consumer","_ref","showModal","components_EditProject","ProjectsList","_this2","isDropdownClosed","projects","map","components_SelectableProject","key","AddProject","openDropdownIfClosed","newProject","uuidv4","addProject","handleCancel","disabledProjectId","NewTodoModal","todoName","handleChangeProject","projectId","setCustomValidity","dueDate","endOfDay","Date","selectRef","reportValidity","compareAsc","datePicker","newTodo","addTodo","handleDateChange","format","disabled","Sidebar","toggleDropdown","prevState","components_AddProject","handleCreateTodo","components_NewTodoModal","isOpen","Fragment","components_ProjectsList","Todo","checkButton","isChecked","completeTodo","deleteTodo","todo","date","curentDate","tommorow","add","days","isEqual","day","getDayFromDate","onTransitionEnd","TodoList","todos","filter","components_Todo","Modal","wrapperRef","modalInfo","isModalShowing","modal","modalElement","App","isSidebarOpen","newName","newProjects","i","concat","newTodos","element","todoId","slice","sort","todo1","todo2","Provider","components_Navbar","components_Sidebar","components_TodoList","components_Modal","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.9410a7d0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Searchbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isFocused: false,\n    }\n\n    this.inputRef = React.createRef();\n    this.closeRef = React.createRef();\n    this.formRef = React.createRef();\n  }\n\n  focus = (event) => {\n    this.setState({\n      isFocused: true,\n    })\n  }\n\n  blur = (event) => {\n    this.formRef.current.reset();\n    event.preventDefault();\n    this.inputRef.current.blur();\n    if (event.relatedTarget !== this.closeRef.current) {\n      this.setState({\n        isFocused: false,\n      });\n    } else {\n      this.closeRef.current.click();\n    }\n  }\n\n  handleClose = () => {\n\n    this.setState({\n      isFocused: false,\n    });\n  }\n  render() {\n    return (\n      <form ref={this.formRef}>\n        <input type='text' className='searchbar' placeholder='Search' onFocus={this.focus} onBlur={this.blur} ref={this.inputRef}>\n        </input>\n        {\n          (this.state.isFocused) &&\n          <button className='closeButton' type='reset' ref={this.closeRef} onClick={this.handleClose}></button>\n        }\n      </form>\n    )\n  }\n}\n\nexport default Searchbar;","import React from 'react'\nimport Searchbar from './Searchbar'\nfunction Navbar(props) {\n    return (\n        <div className='navbar'>\n            <button className='hamburgerButton' onClick={props.toggleSidebar}></button>\n            <button className='houseButton'></button>\n            <Searchbar />\n        </div>\n    )\n}\n\nexport default Navbar","import React from \"react\";\n\nconst Context = React.createContext();\n\nexport default Context;","import React, { Component } from 'react'\n\nclass ProjectActionModal extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projectName: props.initialProjectName\n        }\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            projectName: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form autoComplete='off' className='edit-project' onSubmit={this.props.onSubmit.bind(null,this.state)}>\n                <div>\n                    <label htmlFor='edit-name-project'>{this.props.labelText}</label>\n                    <input required id='edit-name-project' value={this.state.projectName} onChange={this.handleInputChange} type='text' spellCheck='false'></input>\n                </div>\n                <div className='button-container'>\n                    <button type='button' onClick={this.props.onCancel.bind(null,this.state)}>{this.props.cancelButtonText}</button>\n                    <button>{this.props.submitButtonText}</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default ProjectActionModal","import React, { Component } from 'react'\nimport Context from './Context';\nimport ProjectActionModal from './ProjectActionModal';\n/*\nclass EditProject extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projectName: props.project.name\n        }\n    }\n\n    handleInputChange = (event) => {\n        this.setState({\n            projectName: event.target.value\n        })\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n        if (this.state.projectName.length > 0) {\n            this.context.editProjectName(this.props.project.id, this.state.projectName);\n            this.context.closeModal();\n        }\n    }\n\n    handleDelete = (event) => {\n        this.context.deleteProject(this.props.project.id);\n        this.context.closeModal();\n    }\n    render() {\n        return (\n            <form className='edit-project' onSubmit={this.submitForm}>\n                <div>\n                    <label htmlFor='edit-name-project'>List Name</label>\n                    <input id='edit-name-project' value={this.state.projectName} onChange={this.handleInputChange} type='text' autoComplete='false' spellCheck='false'></input>\n                </div>\n                <div className='button-container'>\n                    <button type='button' onClick={this.handleDelete}>Delete</button>\n                    <button>Save</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nEditProject.contextType = Context;\n*/\n\nclass EditProject extends Component {\n    submitForm = (modalState,event) => {\n        event.preventDefault();\n        if (modalState.projectName.length > 0) {\n            this.context.editProjectName(this.props.project.id, modalState.projectName);\n            this.context.closeModal();\n        }\n    }\n\n    handleDelete = (modalState,event) => {\n        this.context.deleteProject(this.props.project.id);\n        this.context.closeModal();\n    }\n\n    render() {\n        return (\n            <ProjectActionModal labelText='List Name' cancelButtonText='Delete' submitButtonText='Save' onCancel={this.handleDelete} onSubmit={this.submitForm} initialProjectName={this.props.project.name}/>\n        )\n    }\n}\n\nEditProject.contextType = Context;\n\nexport default EditProject;","import React from 'react'\nimport Context from './Context';\nimport EditProject from './EditProject';\nfunction SelectableProject(props) {\n  let classes = props.className;\n  if (props.project === props.curentProject) {\n    classes += ' selected-project';\n  }\n\n  const handleClick = () => { props.changeProjectTo(props.project); }\n\n  if (props.project === props.allProjects) {\n    return (\n        <button onClick={handleClick} className={classes}>{props.project.name}\n        </button>\n    )\n  }\n\n  return (\n    <div style={{display : 'flex', justifyContent : 'space-between', alignSelf:'stretch', alignItems:'center'}}>\n      <button onClick={handleClick} className={classes}>{props.project.name}\n      </button>\n      {\n        props.project === props.curentProject &&\n        <Context.Consumer> \n        {\n          ({showModal}) =>\n          (<button className='edit-button' onClick={() =>showModal(<EditProject project={props.project}/>)}></button>)\n        }\n        </Context.Consumer>\n      }\n    </div>\n  )\n}\n\nexport default SelectableProject","import React, { Component } from 'react'\nimport SelectableProject from './SelectableProject'\n\nclass ProjectsList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.ref = React.createRef();\n    }\n\n    render() {\n        return (\n            <div className={'projects-list' + (this.props.isDropdownClosed?' closed':'')}>\n                {\n                    this.props.projects.map((project) => (\n                        <SelectableProject allProjects={this.props.allProjects} curentProject={this.props.curentProject} changeProjectTo={this.props.changeProjectTo} project={project} className='project-name' key={project.id} />\n                    ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProjectsList","import React, { Component } from 'react'\nimport Context from './Context';\nimport ProjectActionModal from './ProjectActionModal';\nimport {v4 as uuidv4} from 'uuid';\n\nclass AddProject extends Component {\n    submitForm = (modalState,event) => {\n        event.preventDefault();\n        this.props.openDropdownIfClosed();\n        if (modalState.projectName.length > 0) {\n            const newProject = {\n                id : uuidv4(),\n                name : modalState.projectName,\n            }\n\n            this.context.addProject(newProject);\n            this.context.closeModal();\n        }\n    }\n\n    handleCancel = (modalState,event) => {\n        this.context.closeModal();\n    }\n\n    render() {\n        return (\n            <ProjectActionModal labelText='Name this list' cancelButtonText='Cancel' submitButtonText='Create' onCancel={this.handleCancel} onSubmit={this.submitForm} initialProjectName={\"\"}/>\n        )\n    }\n}\n\nAddProject.contextType = Context;\nexport default AddProject;","import React, { Component } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport { endOfDay, compareAsc } from 'date-fns';\nimport Context from './Context';\nimport { format } from 'date-fns';\n\nconst disabledProjectId = uuidv4();\n\nclass NewTodoModal extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            todoName: \"\",\n            projectId: (props.curentProject === props.allProjects || props.curentProject == null) ? disabledProjectId : props.curentProject.id,\n            dueDate: format(new Date(), \"yyyy-MM-dd\"),\n        }\n\n        this.selectRef = React.createRef();\n        this.datePicker = React.createRef();\n    }\n    handleInputChange = (event) => {\n        this.setState({\n            todoName: event.target.value\n        });\n    }\n\n    handleChangeProject = (event) => {\n        this.setState({\n            projectId: event.target.value,\n        });\n        event.target.setCustomValidity(\"\");\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        let dueDate = endOfDay(new Date(this.state.dueDate));\n        if (this.state.projectId === disabledProjectId) {\n            this.selectRef.current.setCustomValidity(\"You have to select a project\");\n            this.selectRef.current.reportValidity();\n            return;\n        } \n\n        if (compareAsc(new Date(), dueDate) === 1) {\n            this.datePicker.current.setCustomValidity(\"You must pick a date in the future\");\n            this.selectRef.current.reportValidity();\n            return;\n        }\n\n        const newTodo = {\n            name: this.state.todoName,\n            projectId: this.state.projectId,\n            dueDate: dueDate,\n            id: uuidv4(),\n        };\n        this.context.addTodo(newTodo);\n        this.context.closeModal();\n    }\n\n\n    handleCancel = () => {\n        this.context.closeModal();\n    }\n\n    handleDateChange = (event) => {\n        this.setState({\n            dueDate: event.target.value,\n        });\n        event.target.setCustomValidity(\"\");\n    }\n    render() {\n        return (\n            <form autoComplete='off' className='create-todo-form' onSubmit={this.onSubmit}>\n                <div className='todo-form-input-wrapper'>\n                    <label htmlFor='new-name'>New Task</label>\n                    <input required id='new-name' spellCheck='false' placeholder='I want to...' value={this.state.todoName} onChange={this.handleInputChange}></input>\n\n                    <label htmlFor='project-select'>Project</label>\n                    <select ref={this.selectRef} name='project' id='project-select' value={this.state.projectId} onChange={this.handleChangeProject}>\n                        <option value={disabledProjectId} disabled>Select a project</option>\n                        {\n                            this.props.projects.map((project) => (<option value={project.id} key={project.id}>{project.name}</option>))\n                        }\n                    </select>\n\n                    <label htmlFor='due-date-picker'>Pick due date</label>\n                    <input value={this.state.dueDate} onChange={this.handleDateChange} required type='date' id='due-date-picker' ref={this.datePicker}></input>\n\n                </div>\n                <div className='button-container'>\n                    <button onClick={this.handleCancel} type='button'>Cancel</button>\n                    <button>Create</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nNewTodoModal.contextType = Context;\n\nexport default NewTodoModal;","import React, { Component } from 'react'\nimport ProjectsList from './ProjectsList'\nimport SelectableProject from './SelectableProject'\nimport Context from './Context'\nimport AddProject from \"./AddProject\";\nimport NewTodoModal from './NewTodoModal';\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDropdownClosed: false,\n    }\n  }\n\n  toggleDropdown = () => {\n    this.setState((prevState) => ({\n      isDropdownClosed: (!prevState.isDropdownClosed),\n    }))\n  }\n\n  openDropdownIfClosed = () => {\n    if (this.state.isDropdownClosed === true) {\n      this.setState({\n        isDropdownClosed : false,\n      })\n    }\n  }\n  addProject = () => {\n    this.context.showModal( <AddProject openDropdownIfClosed={this.openDropdownIfClosed} /> );\n\n  }\n\n  handleCreateTodo = () => {\n   this.context.showModal( <NewTodoModal curentProject={this.props.curentProject} projects={this.props.projects} allProjects={this.props.allProjects} /> )\n  }\n\n  render() {\n    return (\n      <div className={'sidebar' + ((!this.props.isOpen) ? ' sidebar-closed' : '')}>\n        <button onClick={this.handleCreateTodo} className='add-todo'>{this.props.isOpen ? '+ Create a Task' : '+'}</button>\n        {\n          this.props.isOpen&&\n          <>\n        <SelectableProject allProjects={this.props.allProjects} changeProjectTo={this.props.changeProjectTo} className='all-projects' project={this.props.allProjects} curentProject={this.props.curentProject} />\n        <div className='projects'>\n          <div>\n            Projects\n          </div>\n          <div className={'drop-down ' + (this.state.isDropdownClosed ? 'up' : 'down')} onClick={this.toggleDropdown}></div>\n          <button className='add' onClick={this.addProject}></button>\n        </div>\n\n        <ProjectsList allProjects={this.props.allProjects} isDropdownClosed={this.state.isDropdownClosed} projects={this.props.projects} changeProjectTo={this.props.changeProjectTo} curentProject={this.props.curentProject} />\n          </>\n      }\n      </div>\n    )\n  }\n}\n\nSidebar.contextType = Context;\n\nexport default Sidebar","import React, { Component } from 'react'\nimport { endOfDay, add, format, isEqual } from 'date-fns';\nimport Context from './Context';\n\nclass Todo extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isChecked : false,\n        }\n    }\n    getDayFromDate(date) {\n        const curentDate = new Date();\n        const tommorow = add(curentDate, { days: 1 });\n\n        if (isEqual(endOfDay(curentDate), endOfDay(date))) {\n            return 'due today';\n        }\n        if (isEqual(endOfDay(tommorow), endOfDay(date))) {\n            return 'due tommorow';\n        }\n\n        return \"due \" + format(date, 'dd MMM')\n    }\n\n    checkButton = () => {\n        this.setState({\n            isChecked : true,\n        })\n    }\n\n    completeTodo = (event) => {\n        this.context.deleteTodo(this.props.todo.id);\n    }\n    render() {\n        const day = this.getDayFromDate(this.props.todo.dueDate);\n        return (\n            <div className='todo-container'>\n                <button className={'checker' + ((this.state.isChecked)?' checked':'')} onClick={this.checkButton} onTransitionEnd={this.completeTodo}></button>\n                <div>{this.props.todo.name}</div>\n                <div className='due-date'>{day}</div>\n            </div>\n        )\n    }\n}\n\nTodo.contextType = Context;\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo';\n\nfunction TodoList(props) {\n  return (\n    <div className='content-wrapper'>\n      <div className='todo-list-container'>\n        {\n          props.todos.filter(todo => props.curentProject === props.allProjects || todo.projectId === props.curentProject.id).map((todo) => <Todo todo={todo} key={todo.id}/>)\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default TodoList","import React, { Component } from 'react'\nimport ModalContext from './Context'\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.wrapperRef = React.createRef();\n    }\n\n    handleClick = (closeModal, event) => {\n        if (event.target === this.wrapperRef.current) {\n            closeModal();\n        }\n    }\n\n    render() {\n        return (\n\n            //this.props.modalInfo.isModalShowing &&\n            <>\n                {\n                    this.props.modalInfo.isModalShowing &&\n                    <ModalContext.Consumer>\n                        {\n                            (modal) => (\n                                <div className='modal-wrapper' onClick={this.handleClick.bind(null, modal.closeModal)} ref={this.wrapperRef}>\n                                    {\n                                        this.props.modalInfo.modalElement\n                                    }\n                                </div>\n                            )\n                        }\n                    </ModalContext.Consumer>\n                }\n            </>\n        );\n    }\n}\n\nexport default Modal","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from './components/Navbar';\nimport Sidebar from './components/Sidebar';\nimport TodoList from './components/TodoList';\nimport {v4 as uuidv4} from 'uuid';\nimport Modal from \"./components/Modal\";\nimport Context from \"./components/Context\";\nimport {compareAsc} from 'date-fns'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSidebarOpen : true,\n      todos: [\n      ],\n      projects: [\n        {\n          name : 'Work',\n          id : uuidv4(),\n        },\n        {\n          name : 'House Tasks',\n          id : uuidv4(),\n        }\n      ],\n      curentProject: this.allProjects,\n      modalInfo: {\n        isModalShowing: false,\n        modalElement: null,\n      }\n    }\n  }\n\n  allProjects = {\n    name: \"All Projects\",\n    id : uuidv4(),\n  }\n\n  toggleSidebar = () => {\n    this.setState((prevState) => ({\n      isSidebarOpen : !prevState.isSidebarOpen\n    }));\n  }\n\n  editProjectName = (projectId, newName) => {\n    let newProjects = this.state.projects;\n    for (let i = 0; i < newProjects.length; i++) {\n      if (newProjects[i].id === projectId) {\n        newProjects[i].name = newName;\n        break;\n      }\n    }\n\n    this.setState({\n      projects: newProjects,\n    });\n  }\n\n  addProject = (project) => {\n    let newProjects = this.state.projects.concat(project);\n    this.setState({\n      projects: newProjects,\n    });\n  }\n\n  deleteProject = (projectId) => {\n    let newProjects = this.state.projects.filter((project) => (project.id !== projectId));\n    const newTodos = this.state.todos.filter(todo => todo.projectId != projectId);\n    this.setState({\n      projects : newProjects,\n      todos : newTodos,\n    })\n  }\n\n  changeProjectTo = (newProject) => {\n    this.setState({\n      curentProject: newProject\n    });\n  }\n\n\n  showModal = (element) => {\n    this.setState({\n      modalInfo: {\n        isModalShowing: true,\n        modalElement: element,\n      }\n    })\n  }\n\n  closeModal = (element) => {\n    this.setState({\n      modalInfo: {\n        isModalShowing: false,\n        modalElement: null,\n      }\n    })\n  }\n\n  deleteTodo = (todoId) => {\n    const newTodos = this.state.todos.filter((todo) => (todo.id !== todoId));\n    this.setState({todos : newTodos});\n  }\n\n  addTodo = (newTodo) => {\n    const newTodos = this.state.todos.concat(newTodo).slice().sort((todo1, todo2) => (compareAsc(todo1.dueDate,todo2.dueDate)))\n    this.setState({todos : newTodos});\n  }\n\n  render() {\n    return (\n      <Context.Provider value={{ showModal: this.showModal, closeModal: this.closeModal, editProjectName: this.editProjectName, deleteProject : this.deleteProject, addProject : this.addProject, deleteTodo : this.deleteTodo, addTodo : this.addTodo }}>\n        <div className='screen-container'>\n          <Navbar toggleSidebar={this.toggleSidebar}/>\n          <Sidebar changeProjectTo={this.changeProjectTo} isOpen={this.state.isSidebarOpen} projects={this.state.projects} allProjects={this.allProjects} curentProject={this.state.curentProject} />\n          <TodoList todos={this.state.todos} curentProject={this.state.curentProject} allProjects={this.allProjects} />\n        </div>\n        <Modal modalInfo={this.state.modalInfo} />\n      </Context.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}